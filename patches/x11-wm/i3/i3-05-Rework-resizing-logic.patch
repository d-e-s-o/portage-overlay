From 3e2bf546165f3abb18ad89625fadb3d860e1cc78 Mon Sep 17 00:00:00 2001
From: Daniel Mueller <deso@posteo.net>
Date: Sat, 30 Sep 2017 12:19:16 -0700
Subject: [PATCH 05/13] Rework resizing logic

i3's logic for resizing, although understandably logical, is unintuitive
for users of Awesome, tmux, or vim. In particular, the way i3 resizes
cons is by finding the parent and then resizing all children such that
the currently active one's percentage increase or decreases (depending
on whether to grow or shrink it). The remaining con's percentage on the
overall width/height is then distributed equally.
The aforementioned other programs, however, take a different approach.
In essence they shift the border between the currently active con (or
whatever term they use) and the one next to it (i.e., right or below,
depending on the direction). If no next neighbor is found then the left
one is taken and the direction inversed.
This change implements the logic of the latter for i3.
---
 src/commands.c | 43 +++++++++++++++++++++++++------------------
 1 file changed, 25 insertions(+), 18 deletions(-)

diff --git a/src/commands.c b/src/commands.c
index 6e174d..1379b4 100644
--- a/src/commands.c
+++ b/src/commands.c
@@ -554,21 +554,34 @@ static bool cmd_resize_tiling_width_height(I3_CMD, Con *current, const char *way
             child->percent = percentage;
     }
 
-    double new_current_percent = current->percent + ((double)ppt / 100.0);
-    double subtract_percent = ((double)ppt / 100.0) / (children - 1);
-    LOG("new_current_percent = %f\n", new_current_percent);
-    LOG("subtract_percent = %f\n", subtract_percent);
-    /* Ensure that the new percentages are positive. */
-    TAILQ_FOREACH(child, &(current->parent->nodes_head), nodes) {
-        if (child == current)
-            continue;
-        if (child->percent - subtract_percent <= 0.0) {
-            LOG("Not resizing, already at minimum size (child %p would end up with a size of %.f\n", child, child->percent - subtract_percent);
+    /*
+     * The way our resizing works is always between two cons. If the
+     * current con has a right neighbour we resize relative to it.
+     */
+    Con *next = TAILQ_NEXT(current, nodes);
+    if (next == NULL) {
+        /*
+         * If there is no right neighbour we resize relative to the left
+         * neighbour. That is, we treat the left neighbour as the one
+         * relative to which the resizing happens.
+         */
+        Con *swap = current;
+        current = TAILQ_PREV(current, nodes_head, nodes);
+        if (current == NULL) {
+            LOG("Not resizing\n");
             ysuccess(false);
             return false;
         }
+        next = swap;
     }
-    if (new_current_percent <= 0.0) {
+
+    double new_current_percent = current->percent + ((double)ppt / 100.0);
+    double subtract_percent = (double)ppt / 100.0;
+    double new_next_percent = next->percent - subtract_percent;
+    LOG("new_current_percent = %f\n", new_current_percent);
+    LOG("subtract_percent = %f\n", subtract_percent);
+
+    if (new_current_percent <= 0.0 || new_next_percent <= 0.0) {
         LOG("Not resizing, already at minimum size\n");
         ysuccess(false);
         return false;
@@ -577,13 +590,7 @@ static bool cmd_resize_tiling_width_height(I3_CMD, Con *current, const char *way
     current->percent = new_current_percent;
     LOG("current->percent after = %f\n", current->percent);
 
-    TAILQ_FOREACH(child, &(current->parent->nodes_head), nodes) {
-        if (child == current)
-            continue;
-        child->percent -= subtract_percent;
-        LOG("child->percent after (%p) = %f\n", child, child->percent);
-    }
-
+    next->percent = new_next_percent;
     return true;
 }
 
-- 
2.18.0

