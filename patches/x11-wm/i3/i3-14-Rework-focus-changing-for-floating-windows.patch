From c5c7581ede4acd487bedaf34dedbd4d843788142 Mon Sep 17 00:00:00 2001
From: Daniel Mueller <deso@posteo.net>
Date: Wed, 29 Nov 2017 08:10:38 -0800
Subject: [PATCH 14/16] Rework focus changing for floating windows

Floating windows feel quite alien compared to "normal" ones when it
comes to their focusing behavior. In particular, three problems have
been identified:
1) They wrap around similar to what other windows did originally.
2) They do not adhere to what can be argued to be the intuitive behavior
   of the 'focus left|right|up|down' commands. In particular, they only
   support cycling through the windows as opposed to taking into account
   their actual position.
3) Related to the second point they are also not taking into account
   different outputs, as is the case for "normal" windows.

This change reworks the focusing logic by making it honor the floating
window's actual position. The patch also hooks them up into the focusing
logic of "normal" windows. Because of that, we also honor output. So if,
say, no further floating windows are found left of the current one but
there is a different output there, this output will receive focus.
---
 include/util.h |  4 ++++
 src/tree.c     | 38 ++++++++++++++++++++------------------
 src/util.c     | 16 ++++++++++++++++
 3 files changed, 40 insertions(+), 18 deletions(-)

diff --git a/include/util.h b/include/util.h
index de6fa5..4cf245 100644
--- a/include/util.h
+++ b/include/util.h
@@ -60,6 +60,10 @@
 int min(int a, int b);
 int max(int a, int b);
 bool rect_contains(Rect rect, uint32_t x, uint32_t y);
+bool rect_left_of(Rect r1, Rect r2);
+bool rect_right_of(Rect r1, Rect r2);
+bool rect_above_of(Rect r1, Rect r2);
+bool rect_below_of(Rect r1, Rect r2);
 Rect rect_add(Rect a, Rect b);
 Rect rect_sub(Rect a, Rect b);
 
diff --git a/src/tree.c b/src/tree.c
index cb30bd..5923c8 100644
--- a/src/tree.c
+++ b/src/tree.c
@@ -586,27 +586,29 @@ static bool _tree_next(Con *con, char way, orientation_t orientation, bool wrap)
     Con *parent = con->parent;
 
     if (con->type == CT_FLOATING_CON) {
-        if (orientation != HORIZ)
-            return false;
+        Con *next = NULL;
+        Con *current;
+        bool (*fn)(Rect, Rect);
+        if (orientation == HORIZ) {
+            fn = (way == 'n') ? rect_right_of : rect_left_of;
+        } else {
+            fn = (way == 'n') ? rect_below_of : rect_above_of;
+        }
 
-        /* left/right focuses the previous/next floating container */
-        Con *next;
-        if (way == 'n')
-            next = TAILQ_NEXT(con, floating_windows);
-        else
-            next = TAILQ_PREV(con, floating_head, floating_windows);
-
-        /* If there is no next/previous container, wrap */
-        if (!next) {
-            if (way == 'n')
-                next = TAILQ_FIRST(&(parent->floating_head));
-            else
-                next = TAILQ_LAST(&(parent->floating_head), floating_head);
+        current = TAILQ_FIRST(&parent->floating_head);
+        while (current != NULL) {
+            if (fn(current->rect, con->rect)) {
+                if (next == NULL || fn(next->rect, current->rect)) {
+                   next = current;
+                }
+            }
+            current = TAILQ_NEXT(current, floating_windows);
         }
 
-        /* Still no next/previous container? bail out */
-        if (!next)
-            return false;
+        /* If we did not find a matching con then continue with the
+         * parent (i.e., the workspace). */
+        if (next == NULL)
+            return _tree_next(parent, way, orientation, wrap);
 
         /* Raise the floating window on top of other windows preserving
          * relative stack order */
diff --git a/src/util.c b/src/util.c
index ba0969..405ab9 100644
--- a/src/util.c
+++ b/src/util.c
@@ -39,6 +39,22 @@ bool rect_contains(Rect rect, uint32_t x, uint32_t y) {
             y <= (rect.y + rect.height));
 }
 
+bool rect_left_of(Rect r1, Rect r2) {
+    return r1.x < r2.x;
+}
+
+bool rect_right_of(Rect r1, Rect r2) {
+    return r1.x + r1.width > r2.x + r2.width;
+}
+
+bool rect_above_of(Rect r1, Rect r2) {
+    return r1.y < r2.y;
+}
+
+bool rect_below_of(Rect r1, Rect r2) {
+    return r1.y + r1.height > r2.y + r2.height;
+}
+
 Rect rect_add(Rect a, Rect b) {
     return (Rect){a.x + b.x,
                   a.y + b.y,
-- 
2.16.1

