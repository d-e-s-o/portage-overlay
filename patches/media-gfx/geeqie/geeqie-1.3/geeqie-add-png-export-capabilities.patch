diff --git a/src/image.c b/src/image.c
index 12fe8f..66778f 100644
--- a/src/image.c
+++ b/src/image.c
@@ -27,6 +27,7 @@
 #include "pixbuf-renderer.h"
 #include "pixbuf_util.h"
 #include "ui_fileops.h"
+#include "utilops.h"
 
 #include "filedata.h"
 #include "filecache.h"
@@ -1922,4 +1923,54 @@ ImageWindow *image_new(gboolean frame)
 
 	return imd;
 }
+
+#define image_show_error_message(parent, ...)							\
+	{											\
+		gchar *text = g_strdup_printf(__VA_ARGS__);					\
+		file_util_warning_dialog(_("Error"), text, GTK_STOCK_DIALOG_ERROR, parent);	\
+		g_free(text);									\
+	}
+
+void image_save_as_png(ImageWindow *imd)
+{
+	const gchar const png_ext[] = ".png";
+	GdkPixbuf *pixbuf;
+	gchar const *path;
+	gchar *png_path;
+	gboolean result;
+	size_t size;
+
+	path = image_get_path(imd);
+	g_assert(path != NULL);
+
+	size = strlen(path);
+	png_path = malloc(size + sizeof(png_ext) + 1 /* NULL byte */);
+	if (png_path == NULL)
+	{
+		image_show_error_message(imd->widget, "%s", "Allocating memory for path failed.");
+		return;
+	}
+
+	memcpy(png_path, path, size);
+	memcpy(png_path + size, png_ext, sizeof(png_ext) /* Includes NULL byte. */);
+
+	if (access_file(png_path, F_OK))
+	{
+		/* The file already exists. */
+		/*
+		 * TODO: We could use some more elaborate handling here but for now
+		 *       we just bail out.
+		 */
+		image_show_error_message(imd->widget, "The file %s already exists.", png_path);
+		goto out;
+	}
+	pixbuf = image_get_pixbuf(imd);
+	result = pixbuf_to_file_as_png(pixbuf, png_path);
+
+	if (!result)
+		image_show_error_message(imd->widget, "Failed to save png: %s", png_path);
+
+out:
+	free(png_path);
+}
 /* vim: set shiftwidth=8 softtabstop=0 cindent cinoptions={1s: */
diff --git a/src/image.h b/src/image.h
index 9f7c7c..04cda3 100644
--- a/src/image.h
+++ b/src/image.h
@@ -142,6 +142,9 @@ void image_set_image_as_tiles(ImageWindow *imd, gint width, gint height,
 /* reset default options */
 void image_options_sync(void);
 
+/* export to png */
+void image_save_as_png(ImageWindow *imd);
+
 
 #endif
 /* vim: set shiftwidth=8 softtabstop=0 cindent cinoptions={1s: */
diff --git a/src/layout_image.c b/src/layout_image.c
index b59eaa..05b193 100644
--- a/src/layout_image.c
+++ b/src/layout_image.c
@@ -301,6 +301,18 @@ static void li_pop_menu_edit_cb(GtkWidget *widget, gpointer data)
 	file_util_start_editor_from_file(key, layout_image_get_fd(lw), lw->window);
 }
 
+static void li_pop_memu_save_as_png_cb(GtkWidget *widget, gpointer data)
+{
+	LayoutWindow *lw = data;
+	ImageWindow *imd = lw->image;
+
+	/*
+	 * TODO: We should update the image view afterwards to have the new
+	 *       image listed properly.
+	 */
+	image_save_as_png(imd);
+}
+
 static void li_pop_menu_wallpaper_cb(GtkWidget *widget, gpointer data)
 {
 	LayoutWindow *lw = data;
@@ -504,6 +516,8 @@ static GtkWidget *layout_image_pop_menu(LayoutWindow *lw)
 
 	menu_item_add_divider(menu);
 
+	item = menu_item_add_stock(menu, _("_Save as png"), GTK_STOCK_SAVE, G_CALLBACK(li_pop_memu_save_as_png_cb), lw);
+	if (!path) gtk_widget_set_sensitive(item, FALSE);
 	item = menu_item_add_stock(menu, _("_Copy..."), GTK_STOCK_COPY, G_CALLBACK(li_pop_menu_copy_cb), lw);
 	if (!path) gtk_widget_set_sensitive(item, FALSE);
 	item = menu_item_add(menu, _("_Move..."), G_CALLBACK(li_pop_menu_move_cb), lw);
diff --git a/src/layout_util.c b/src/layout_util.c
index a95401..415787 100644
--- a/src/layout_util.c
+++ b/src/layout_util.c
@@ -26,6 +26,7 @@
 #include "editors.h"
 #include "filedata.h"
 #include "history_list.h"
+#include "image.h"
 #include "image-overlay.h"
 #include "histogram.h"
 #include "img-view.h"
@@ -264,6 +265,18 @@ static void layout_menu_dir_cb(GtkAction *action, gpointer data)
 	if (lw->vd) vd_new_folder(lw->vd, lw->dir_fd);
 }
 
+static void layout_menu_save_as_png_cb(GtkAction *action, gpointer data)
+{
+	LayoutWindow *lw = data;
+	ImageWindow *imd = lw->image;
+
+	/*
+	 * TODO: We should update the image view afterwards to have the new
+	 *       image listed properly.
+	 */
+	image_save_as_png(imd);
+}
+
 static void layout_menu_copy_cb(GtkAction *action, gpointer data)
 {
 	LayoutWindow *lw = data;
@@ -1285,6 +1298,7 @@ static GtkActionEntry menu_entries[] = {
   { "PanView",		NULL,			N_("Pa_n view"),			"<control>J",		N_("Pan view"),				CB(layout_menu_pan_cb) },
   { "Print",		GTK_STOCK_PRINT,	N_("_Print..."),			"<shift>P",		N_("Print..."),				CB(layout_menu_print_cb) },
   { "NewFolder",	GTK_STOCK_DIRECTORY,	N_("N_ew folder..."),			"<control>F",		N_("New folder..."),			CB(layout_menu_dir_cb) },
+  { "Png",		GTK_STOCK_SAVE,		N_("_Save as png"),			"<control>S",		N_("Save as png"),			CB(layout_menu_save_as_png_cb) },
   { "Copy",		GTK_STOCK_COPY,		N_("_Copy..."),				"<control>C",		N_("Copy..."),				CB(layout_menu_copy_cb) },
   { "Move",		NULL,			N_("_Move..."),				"<control>M",		N_("Move..."),				CB(layout_menu_move_cb) },
   { "Rename",		NULL,			N_("_Rename..."),			"<control>R",		N_("Rename..."),			CB(layout_menu_rename_cb) },
@@ -1448,6 +1462,7 @@ static const gchar *menu_ui_description =
 "      <placeholder name='PrintSection'/>"
 "      <separator/>"
 "      <menuitem action='NewFolder'/>"
+"      <menuitem action='Png'/>"
 "      <menuitem action='Copy'/>"
 "      <menuitem action='Move'/>"
 "      <menuitem action='Rename'/>"
diff --git a/src/view_file.c b/src/view_file.c
index dbc53e..22e922 100644
--- a/src/view_file.c
+++ b/src/view_file.c
@@ -13,7 +13,9 @@
 #include "view_file.h"
 
 #include "editors.h"
+#include "image.h"
 #include "layout.h"
+#include "layout_image.h"
 #include "menu.h"
 #include "thumb.h"
 #include "ui_menu.h"
@@ -346,6 +348,35 @@ static void vf_pop_menu_view_cb(GtkWidget *widget, gpointer data)
 	}
 }
 
+static gboolean vf_is_current_selection_displayed(ViewFile *vf)
+{
+	GList *list;
+	gboolean result = FALSE;
+
+	list = vflist_pop_menu_file_list(vf);
+	if (g_list_length(list) == 1)
+	{
+		FileData *sel_fd = g_list_first(list)->data;
+		FileData *displayed_fd = layout_image_get_fd(vf->layout);
+
+		result = sel_fd == displayed_fd;
+	}
+	filelist_free(list);
+	return result;
+}
+
+static void vf_pop_menu_save_as_png_cb(GtkWidget *widget, gpointer data)
+{
+	ViewFile *vf = data;
+
+	g_assert(vf_is_current_selection_displayed(vf));
+	/*
+	 * TODO: We should update the image view afterwards to have the new
+	 *       image listed properly.
+	 */
+	image_save_as_png(vf->layout->image);
+}
+
 static void vf_pop_menu_copy_cb(GtkWidget *widget, gpointer data)
 {
 	ViewFile *vf = data;
@@ -517,6 +548,7 @@ GtkWidget *vf_pop_menu(ViewFile *vf)
 	GtkWidget *item;
 	GtkWidget *submenu;
 	gboolean active = FALSE;
+	gboolean displayed = vf_is_current_selection_displayed(vf);
 
 	switch (vf->type)
 	{
@@ -589,6 +621,13 @@ GtkWidget *vf_pop_menu(ViewFile *vf)
 				      G_CALLBACK(vf_pop_menu_view_cb), vf);
 
 	menu_item_add_divider(menu);
+	/*
+	 * We only allow exporting of a single item -- the selected one.
+	 * The reason is that the image must be displayed currently in
+	 * order for the pixel data to be available.
+	 */
+	menu_item_add_stock_sensitive(menu, _("_Save as png"), GTK_STOCK_SAVE, active && displayed,
+				      G_CALLBACK(vf_pop_menu_save_as_png_cb), vf);
 	menu_item_add_stock_sensitive(menu, _("_Copy..."), GTK_STOCK_COPY, active,
 				      G_CALLBACK(vf_pop_menu_copy_cb), vf);
 	menu_item_add_sensitive(menu, _("_Move..."), active,
