From 05d4f25eff716d67310bc1ecd70df56c5e6f90a2 Mon Sep 17 00:00:00 2001
From: Daniel Mueller <deso@posteo.net>
Date: Sun, 20 May 2018 09:30:14 -0700
Subject: [PATCH] Add support for CARGO_TARGET_DIR_PREFIX

This change adds support for a new environment variable,
CARGO_TARGET_DIR_PREFIX, to cargo. This variable, when set, is treated
as a prefix to the target directory.
This change addresses https://github.com/rust-lang/cargo/issues/5544.

TODO: Definitely not finished. This patch needs more tests and may need
      additional config.toml support (?).
---
 src/cargo/util/config.rs                       | 11 +++++
 src/doc/src/reference/environment-variables.md |  7 +++-
 tests/testsuite/build.rs                       | 58 ++++++++++++++++++++++++++
 tests/testsuite/cargotest/mod.rs               |  1 +
 4 files changed, 76 insertions(+), 1 deletion(-)

diff --git a/src/cargo/util/config.rs b/src/cargo/util/config.rs
index 19b431..67784c 100644
--- a/src/cargo/util/config.rs
+++ b/src/cargo/util/config.rs
@@ -240,6 +240,17 @@ impl Config {
     pub fn target_dir(&self) -> CargoResult<Option<Filesystem>> {
         if let Some(dir) = env::var_os("CARGO_TARGET_DIR") {
             Ok(Some(Filesystem::new(self.cwd.join(dir))))
+        } else if let Some(dir) = env::var_os("CARGO_TARGET_DIR_PREFIX") {
+            let prefix = Path::new(&dir);
+            if !prefix.is_absolute() {
+                bail!("CARGO_TARGET_DIR_PREFIX must describe an absolute path");
+            }
+            match self.cwd.strip_prefix("/") {
+                Ok(cwd) => Ok(Some(Filesystem::new(prefix.join(&cwd).join("target")))),
+                // FIXME: This logic is probably not safe on Windows. Not sure how
+                //        to make a path relative there.
+                Err(_) => bail!("CARGO_TARGET_DIR_PREFIX must describe an absolute path"),
+            }
         } else if let Some(val) = self.get_path("build.target-dir")? {
             let val = self.cwd.join(val.val);
             Ok(Some(Filesystem::new(val)))
diff --git a/src/doc/src/reference/environment-variables.md b/src/doc/src/reference/environment-variables.md
index b5f81e..dd8aff 100644
--- a/src/doc/src/reference/environment-variables.md
+++ b/src/doc/src/reference/environment-variables.md
@@ -13,8 +13,13 @@ system:
   checkouts of crates.  By default these are stored under `$HOME/.cargo`, but
   this variable overrides the location of this directory. Once a crate is cached
   it is not removed by the clean command.
+* `CARGO_TARGET_DIR_PREFIX` - Prefix to the location where to place all
+  generated artifacts. The current working directory will be appended to this
+  prefix to form the final path for generated artifacts. Note that
+  `CARGO_TARGET_DIR`, if set, takes precedence over this variable.
 * `CARGO_TARGET_DIR` - Location of where to place all generated artifacts,
-  relative to the current working directory.
+  relative to the current working directory. This variable supersedes the
+  behavior of `CARGO_TARGET_DIR_PREFIX`.
 * `RUSTC` - Instead of running `rustc`, Cargo will execute this specified
   compiler instead.
 * `RUSTC_WRAPPER` - Instead of simply running `rustc`, Cargo will execute this
diff --git a/tests/testsuite/build.rs b/tests/testsuite/build.rs
index 7cc6b6..63e391 100644
--- a/tests/testsuite/build.rs
+++ b/tests/testsuite/build.rs
@@ -3615,6 +3615,64 @@ fn dotdir_root() {
     assert_that(p.cargo("build"), execs().with_status(0));
 }
 
+#[test]
+fn custom_target_dir_prefix() {
+    let tmpdir = tempfile::Builder::new()
+        .tempdir()
+        .unwrap()
+        .path()
+        .to_path_buf();
+
+    let p = project("foo")
+        .file(
+            "Cargo.toml",
+            r#"
+            [package]
+            name = "foo"
+            version = "0.0.1"
+            authors = []
+        "#,
+        )
+        .file("src/main.rs", "fn main() {}")
+        .build();
+
+    let root = p.root();
+    let root_suffix = root.strip_prefix("/").unwrap();
+    let exe_name = format!("foo{}", env::consts::EXE_SUFFIX);
+
+    assert_that(
+        p.cargo("build")
+            .env("CARGO_TARGET_DIR_PREFIX", tmpdir.clone()),
+        execs().with_status(0),
+    );
+    assert_that(
+        tmpdir
+            .clone()
+            .join(root_suffix)
+            .join("target/debug")
+            .join(&exe_name),
+        existing_file(),
+    );
+    assert_that(
+        &p.root().join("target/debug").join(&exe_name),
+        is_not(existing_file()),
+    );
+
+    assert_that(p.cargo("build"), execs().with_status(0));
+    assert_that(
+        tmpdir
+            .clone()
+            .join(root_suffix)
+            .join("target/debug")
+            .join(&exe_name),
+        existing_file(),
+    );
+    assert_that(
+        &p.root().join("target/debug").join(&exe_name),
+        existing_file(),
+    );
+}
+
 #[test]
 fn custom_target_dir() {
     let p = project("foo")
diff --git a/tests/testsuite/cargotest/mod.rs b/tests/testsuite/cargotest/mod.rs
index 73d5c3..422d63 100644
--- a/tests/testsuite/cargotest/mod.rs
+++ b/tests/testsuite/cargotest/mod.rs
@@ -62,6 +62,7 @@ fn _process(t: &OsStr) -> cargo::util::ProcessBuilder {
      .env_remove("GIT_AUTHOR_EMAIL")
      .env_remove("GIT_COMMITTER_NAME")
      .env_remove("GIT_COMMITTER_EMAIL")
+     .env_remove("CARGO_TARGET_DIR_PREFIX") // we assume no prefix
      .env_remove("CARGO_TARGET_DIR")     // we assume 'target'
      .env_remove("MSYSTEM"); // assume cmd.exe everywhere on windows
     return p;
-- 
2.16.1

