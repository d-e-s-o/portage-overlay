From 9631e49164d50d03d64be192decc47fb22f926cc Mon Sep 17 00:00:00 2001
From: Daniel Mueller <deso@posteo.net>
Date: Thu, 12 Dec 2019 20:12:50 -0800
Subject: [PATCH] Fix undefined variable references in bash completion script

When run in a 'set -u' enabled shell, various completion operations
error out because they reference an undefined variable. This change
adjusts those locations to assume empty values by default.
---
 contrib/completion/git-completion.bash | 38 +++++++++++++-------------
 1 file changed, 19 insertions(+), 19 deletions(-)

diff --git a/contrib/completion/git-completion.bash b/contrib/completion/git-completion.bash
index c21786..f0c4d8 100644
--- a/contrib/completion/git-completion.bash
+++ b/contrib/completion/git-completion.bash
@@ -50,7 +50,7 @@ esac
 # variable.
 __git_find_repo_path ()
 {
-	if [ -n "$__git_repo_path" ]; then
+	if [ -n "${__git_repo_path:-}" ]; then
 		# we already know where it is
 		return
 	fi
@@ -239,7 +239,7 @@ __git_reassemble_comp_words_by_ref()
 				((j--))
 			fi
 			first=
-			words_[$j]=${words_[j]}${COMP_WORDS[i]}
+			words_[$j]=${words_[j]:-}${COMP_WORDS[i]}
 			if [ $i = $COMP_CWORD ]; then
 				cword_=$j
 			fi
@@ -250,7 +250,7 @@ __git_reassemble_comp_words_by_ref()
 				return
 			fi
 		done
-		words_[$j]=${words_[j]}${COMP_WORDS[i]}
+		words_[$j]=${words_[j]:-}${COMP_WORDS[i]}
 		if [ $i = $COMP_CWORD ]; then
 			cword_=$j
 		fi
@@ -771,7 +771,7 @@ __git_complete_refs ()
 		shift
 	done
 
-	__gitcomp_direct "$(__git_refs "$remote" "$track" "$pfx" "$cur_" "$sfx")"
+	__gitcomp_direct "$(__git_refs "${remote:-}" "${track:-}" "${pfx:-}" "${cur_:-}" "${sfx:-}")"
 }
 
 # __git_refs2 requires 1 argument (to pass to __git_refs)
@@ -815,7 +815,7 @@ __git_refs_remotes ()
 __git_remotes ()
 {
 	__git_find_repo_path
-	test -d "$__git_repo_path/remotes" && ls -1 "$__git_repo_path/remotes"
+	test -d "${__git_repo_path:-}/remotes" && ls -1 "${__git_repo_path:-}/remotes"
 	__git remote
 }
 
@@ -1090,7 +1090,7 @@ __git_find_on_cmdline ()
 	while [ $c -lt $cword ]; do
 		for word in $wordlist; do
 			if [ "$word" = "${words[c]}" ]; then
-				if [ -n "$show_idx" ]; then
+				if [ -n "${show_idx:-}" ]; then
 					echo "$c $word"
 				else
 					echo "$word"
@@ -1203,7 +1203,7 @@ __git_am_inprogress_options="--skip --continue --resolved --abort --quit --show-
 _git_am ()
 {
 	__git_find_repo_path
-	if [ -d "$__git_repo_path"/rebase-apply ]; then
+	if [ -d "${__git_repo_path:-}"/rebase-apply ]; then
 		__gitcomp "$__git_am_inprogress_options"
 		return
 	fi
@@ -1287,7 +1287,7 @@ _git_bisect ()
 	local subcommand="$(__git_find_on_cmdline "$subcommands")"
 	if [ -z "$subcommand" ]; then
 		__git_find_repo_path
-		if [ -f "$__git_repo_path"/BISECT_START ]; then
+		if [ -f "${__git_repo_path:-}"/BISECT_START ]; then
 			__gitcomp "$subcommands"
 		else
 			__gitcomp "replay start"
@@ -1371,7 +1371,7 @@ _git_checkout ()
 		# check if --track, --no-track, or --no-guess was specified
 		# if so, disable DWIM mode
 		local flags="--track --no-track --no-guess" track_opt="--track"
-		if [ "$GIT_COMPLETION_CHECKOUT_NO_GUESS" = "1" ] ||
+		if [ "${GIT_COMPLETION_CHECKOUT_NO_GUESS:-}" = "1" ] ||
 		   [ -n "$(__git_find_on_cmdline "$flags")" ]; then
 			track_opt=''
 		fi
@@ -1387,7 +1387,7 @@ __git_cherry_pick_inprogress_options=$__git_sequencer_inprogress_options
 _git_cherry_pick ()
 {
 	__git_find_repo_path
-	if [ -f "$__git_repo_path"/CHERRY_PICK_HEAD ]; then
+	if [ -f "${__git_repo_path:-}"/CHERRY_PICK_HEAD ]; then
 		__gitcomp "$__git_cherry_pick_inprogress_options"
 		return
 	fi
@@ -1795,7 +1795,7 @@ _git_log ()
 	__git_find_repo_path
 
 	local merge=""
-	if [ -f "$__git_repo_path/MERGE_HEAD" ]; then
+	if [ -f "${__git_repo_path:-}/MERGE_HEAD" ]; then
 		merge="--merge"
 	fi
 	case "$prev,$cur" in
@@ -2066,11 +2066,11 @@ __git_rebase_interactive_inprogress_options="$__git_rebase_inprogress_options --
 _git_rebase ()
 {
 	__git_find_repo_path
-	if [ -f "$__git_repo_path"/rebase-merge/interactive ]; then
+	if [ -f "${__git_repo_path:-}"/rebase-merge/interactive ]; then
 		__gitcomp "$__git_rebase_interactive_inprogress_options"
 		return
-	elif [ -d "$__git_repo_path"/rebase-apply ] || \
-	     [ -d "$__git_repo_path"/rebase-merge ]; then
+	elif [ -d "${__git_repo_path:-}"/rebase-apply ] || \
+	     [ -d "${__git_repo_path:-}"/rebase-merge ]; then
 		__gitcomp "$__git_rebase_inprogress_options"
 		return
 	fi
@@ -2670,7 +2670,7 @@ __git_revert_inprogress_options=$__git_sequencer_inprogress_options
 _git_revert ()
 {
 	__git_find_repo_path
-	if [ -f "$__git_repo_path"/REVERT_HEAD ]; then
+	if [ -f "${__git_repo_path:-}"/REVERT_HEAD ]; then
 		__gitcomp "$__git_revert_inprogress_options"
 		return
 	fi
@@ -3175,7 +3175,7 @@ __git_main ()
 		((c++))
 	done
 
-	if [ -z "$command" ]; then
+	if [ -z "${command:-}" ]; then
 		case "$prev" in
 		--git-dir|-C|--work-tree)
 			# these need a path argument, let's fall back to
@@ -3210,9 +3210,9 @@ __git_main ()
 			"
 			;;
 		*)
-			if test -n "$GIT_TESTING_PORCELAIN_COMMAND_LIST"
+			if test -n "${GIT_TESTING_PORCELAIN_COMMAND_LIST:-}"
 			then
-				__gitcomp "$GIT_TESTING_PORCELAIN_COMMAND_LIST"
+				__gitcomp "${GIT_TESTING_PORCELAIN_COMMAND_LIST:-}"
 			else
 				__gitcomp "$(__git --list-cmds=list-mainporcelain,others,nohelpers,alias,list-complete,config)"
 			fi
@@ -3238,7 +3238,7 @@ __gitk_main ()
 	__git_find_repo_path
 
 	local merge=""
-	if [ -f "$__git_repo_path/MERGE_HEAD" ]; then
+	if [ -f "${__git_repo_path:-}/MERGE_HEAD" ]; then
 		merge="--merge"
 	fi
 	case "$cur" in
-- 
2.26.2

