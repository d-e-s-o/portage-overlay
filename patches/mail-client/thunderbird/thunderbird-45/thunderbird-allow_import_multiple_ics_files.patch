--- a/calendar/base/content/import-export.js	2017-03-28 20:45:41.630158393 -0700
+++ b/calendar/base/content/import-export.js	2017-03-28 21:01:54.702179077 -0700
@@ -14,6 +14,74 @@
 var MODE_SYNC     = 0x40;
 var MODE_EXCL     = 0x80;
 
+function importEvent(fp, file, defaultCIDIndex, aCalendar, contractids) {
+    let filterIndex = fp.filterIndex;
+    if (fp.filterIndex < 0 || fp.filterIndex > contractids.length) {
+        // For some reason the wrong filter was selected, assume default extension
+        filterIndex = defaultCIDIndex;
+    }
+
+    let filePath = file.path;
+    let importer = Components.classes[contractids[filterIndex]]
+                             .getService(Components.interfaces.calIImporter);
+
+    const nsIFileInputStream = Components.interfaces.nsIFileInputStream;
+    const nsIScriptableInputStream = Components.interfaces.nsIScriptableInputStream;
+
+    let inputStream = Components.classes["@mozilla.org/network/file-input-stream;1"]
+                                .createInstance(nsIFileInputStream);
+    let items = [];
+    let exc;
+
+    try {
+        inputStream.init( file, MODE_RDONLY, parseInt("0444", 8), {});
+        items = importer.importFromStream(inputStream, {});
+    } catch(ex) {
+        exc = ex;
+        switch (ex.result) {
+            case Components.interfaces.calIErrors.INVALID_TIMEZONE:
+                showError(cal.calGetString("calendar", "timezoneError", [filePath]));
+                break;
+            default:
+                showError(cal.calGetString("calendar", "unableToRead") + filePath + "\n"+ ex);
+        }
+    } finally {
+        inputStream.close();
+    }
+
+    if (!items.length && !exc) {
+        // the ics did not contain any events, so there's no need to proceed. But we should
+        // notify the user about it at least in the log, if we haven't before.
+        cal.LOG("Failed to import from " + filePath + ". There are no importable items in this file.");
+        return;
+    }
+
+    if (aCalendar) {
+        putItemsIntoCal(aCalendar, items);
+        return;
+    }
+
+    let calendars = cal.getCalendarManager().getCalendars({});
+    calendars = calendars.filter(isCalendarWritable);
+
+    if (calendars.length < 1) {
+        // XXX alert something?
+        return;
+    } else if (calendars.length == 1) {
+        // There's only one calendar, so it's silly to ask what calendar
+        // the user wants to import into.
+        putItemsIntoCal(calendars[0], items, filePath);
+    } else {
+        // Ask what calendar to import into
+        let args = new Object();
+        args.onOk = function putItems(aCal) { putItemsIntoCal(aCal, items, filePath); };
+        args.calendars = calendars;
+        args.promptText = calGetString("calendar", "importPrompt");
+        openDialog("chrome://calendar/content/chooseCalendarDialog.xul",
+                   "_blank", "chrome,titlebar,modal,resizable", args);
+    }
+}
+
 /**
  * Shows a file dialog, reads the selected file(s) and tries to parse events from it.
  *
@@ -27,7 +95,7 @@
                        .createInstance(nsIFilePicker);
     fp.init(window,
             calGetString("calendar", "filepickerTitleImport"),
-            nsIFilePicker.modeOpen);
+            nsIFilePicker.modeOpenMultiple);
     fp.defaultExtension = "ics";
 
     // Get a list of importers
@@ -63,73 +131,11 @@
 
     let rv = fp.show();
 
-    if (rv != nsIFilePicker.returnCancel &&
-        fp.file && fp.file.path && fp.file.path.length > 0) {
-
-        let filterIndex = fp.filterIndex;
-        if (fp.filterIndex < 0 || fp.filterIndex > contractids.length) {
-            // For some reason the wrong filter was selected, assume default extension
-            filterIndex = defaultCIDIndex;
-        }
-
-        let filePath = fp.file.path;
-        let importer = Components.classes[contractids[filterIndex]]
-                                 .getService(Components.interfaces.calIImporter);
-
-        const nsIFileInputStream = Components.interfaces.nsIFileInputStream;
-        const nsIScriptableInputStream = Components.interfaces.nsIScriptableInputStream;
-
-        let inputStream = Components.classes["@mozilla.org/network/file-input-stream;1"]
-                                    .createInstance(nsIFileInputStream);
-        let items = [];
-        let exc;
-
-        try {
-            inputStream.init( fp.file, MODE_RDONLY, parseInt("0444", 8), {});
-            items = importer.importFromStream(inputStream, {});
-        } catch(ex) {
-            exc = ex;
-            switch (ex.result) {
-                case Components.interfaces.calIErrors.INVALID_TIMEZONE:
-                    showError(cal.calGetString("calendar", "timezoneError", [filePath]));
-                    break;
-                default:
-                    showError(cal.calGetString("calendar", "unableToRead") + filePath + "\n"+ ex);
-            }
-        } finally {
-            inputStream.close();
-        }
-
-        if (!items.length && !exc) {
-            // the ics did not contain any events, so there's no need to proceed. But we should
-            // notify the user about it at least in the log, if we haven't before.
-            cal.LOG("Failed to import from " + filePath + ". There are no importable items in this file.");
-            return;
-        }
-
-        if (aCalendar) {
-            putItemsIntoCal(aCalendar, items);
-            return;
-        }
-
-        let calendars = cal.getCalendarManager().getCalendars({});
-        calendars = calendars.filter(isCalendarWritable);
-
-        if (calendars.length < 1) {
-            // XXX alert something?
-            return;
-        } else if (calendars.length == 1) {
-            // There's only one calendar, so it's silly to ask what calendar
-            // the user wants to import into.
-            putItemsIntoCal(calendars[0], items, filePath);
-        } else {
-            // Ask what calendar to import into
-            let args = new Object();
-            args.onOk = function putItems(aCal) { putItemsIntoCal(aCal, items, filePath); };
-            args.calendars = calendars;
-            args.promptText = calGetString("calendar", "importPrompt");
-            openDialog("chrome://calendar/content/chooseCalendarDialog.xul",
-                       "_blank", "chrome,titlebar,modal,resizable", args);
+    if (rv != nsIFilePicker.returnCancel && fp.files) {
+        let files = fp.files;
+        while (files.hasMoreElements()) {
+            let file = files.getNext();
+            importEvent(fp, file, defaultCIDIndex, aCalendar, contractids);
         }
     }
 }
