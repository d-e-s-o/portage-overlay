From 2ed39e364559faeba6b82bcde3eaa53d375069ed Mon Sep 17 00:00:00 2001
From: Daniel Mueller <deso@posteo.net>
Date: Fri, 12 Oct 2018 22:12:29 -0700
Subject: [PATCH 1/2] Allow for importing of multiple .ics files at once

When working with large numbers of .ics files at once, Thunderbird's
one-file-at-a-time approach to importing them is limiting severely and
simply unfeasible.
Hence, with this change we adjust the import logic to allow for the
selection of multiple files at once. We factor out a function for
importing a single file and invoke this method for all files reported as
being selected.
---
 comm/calendar/base/content/import-export.js | 120 ++++++++++----------
 1 file changed, 62 insertions(+), 58 deletions(-)

diff --git a/comm/calendar/base/content/import-export.js b/comm/calendar/base/content/import-export.js
index de9f0c..18468f 100644
--- a/comm/calendar/base/content/import-export.js
+++ b/comm/calendar/base/content/import-export.js
@@ -26,7 +26,7 @@ function loadEventsFromFile(aCalendar) {
                            .createInstance(nsIFilePicker);
     picker.init(window,
                 cal.l10n.getCalString("filepickerTitleImport"),
-                nsIFilePicker.modeOpen);
+                nsIFilePicker.modeOpenMultiple);
     picker.defaultExtension = "ics";
 
     // Get a list of importers
@@ -61,70 +61,74 @@ function loadEventsFromFile(aCalendar) {
     }
 
     picker.open(rv => {
-        if (rv != nsIFilePicker.returnOK || !picker.file || !picker.file.path) {
+        if (rv != nsIFilePicker.returnOK || !picker.files) {
             return;
         }
-
-        let filterIndex = picker.filterIndex;
-        if (picker.filterIndex < 0 || picker.filterIndex > contractids.length) {
-            // For some reason the wrong filter was selected, assume default extension
-            filterIndex = defaultCIDIndex;
-        }
-
-        let filePath = picker.file.path;
-        let importer = Components.classes[contractids[filterIndex]]
-                                 .getService(Components.interfaces.calIImporter);
-
-        const nsIFileInputStream = Components.interfaces.nsIFileInputStream;
-
-        let inputStream = Components.classes["@mozilla.org/network/file-input-stream;1"]
-                                    .createInstance(nsIFileInputStream);
-        let items = [];
-        let exception;
-
-        try {
-            inputStream.init(picker.file, MODE_RDONLY, parseInt("0444", 8), {});
-            items = importer.importFromStream(inputStream, {});
-        } catch (ex) {
-            exception = ex;
-            switch (ex.result) {
-                case Components.interfaces.calIErrors.INVALID_TIMEZONE:
-                    cal.showError(cal.l10n.getCalString("timezoneError", [filePath]), window);
-                    break;
-                default:
-                    cal.showError(cal.l10n.getCalString("unableToRead") + filePath + "\n" + ex, window);
+        let files = picker.files;
+        while (files.hasMoreElements()) {
+            let file = files.getNext();
+
+            let filterIndex = picker.filterIndex;
+            if (picker.filterIndex < 0 || picker.filterIndex > contractids.length) {
+                // For some reason the wrong filter was selected, assume default extension
+                filterIndex = defaultCIDIndex;
             }
-        } finally {
-            inputStream.close();
-        }
 
-        if (!items.length && !exception) {
-            // the ics did not contain any events, so there's no need to proceed. But we should
-            // notify the user about it, if we haven't before.
-            cal.showError(cal.l10n.getCalString("noItemsInCalendarFile", [filePath]), window);
-            return;
-        }
+            let filePath = file.path;
+            let importer = Components.classes[contractids[filterIndex]]
+                                     .getService(Components.interfaces.calIImporter);
+
+            const nsIFileInputStream = Components.interfaces.nsIFileInputStream;
+
+            let inputStream = Components.classes["@mozilla.org/network/file-input-stream;1"]
+                                        .createInstance(nsIFileInputStream);
+            let items = [];
+            let exception;
+
+            try {
+                inputStream.init(file, MODE_RDONLY, parseInt("0444", 8), {});
+                items = importer.importFromStream(inputStream, {});
+            } catch (ex) {
+                exception = ex;
+                switch (ex.result) {
+                    case Components.interfaces.calIErrors.INVALID_TIMEZONE:
+                        cal.showError(cal.l10n.getCalString("timezoneError", [filePath]), window);
+                        break;
+                    default:
+                        cal.showError(cal.l10n.getCalString("unableToRead") + filePath + "\n" + ex, window);
+                }
+            } finally {
+                inputStream.close();
+            }
 
-        if (aCalendar) {
-            putItemsIntoCal(aCalendar, items);
-            return;
-        }
+            if (!items.length && !exception) {
+                // the ics did not contain any events, so there's no need to proceed. But we should
+                // notify the user about it, if we haven't before.
+                cal.showError(cal.l10n.getCalString("noItemsInCalendarFile", [filePath]), window);
+                return;
+            }
 
-        let calendars = cal.getCalendarManager().getCalendars({});
-        calendars = calendars.filter(cal.acl.isCalendarWritable);
+            if (aCalendar) {
+                putItemsIntoCal(aCalendar, items);
+                return;
+            }
 
-        if (calendars.length == 1) {
-            // There's only one calendar, so it's silly to ask what calendar
-            // the user wants to import into.
-            putItemsIntoCal(calendars[0], items, filePath);
-        } else if (calendars.length > 1) {
-            // Ask what calendar to import into
-            let args = {};
-            args.onOk = (aCal) => { putItemsIntoCal(aCal, items, filePath); };
-            args.calendars = calendars;
-            args.promptText = cal.l10n.getCalString("importPrompt");
-            openDialog("chrome://calendar/content/chooseCalendarDialog.xul",
-                       "_blank", "chrome,titlebar,modal,resizable", args);
+            let calendars = cal.getCalendarManager().getCalendars({});
+            calendars = calendars.filter(cal.acl.isCalendarWritable);
+
+            if (calendars.length == 1) {
+                // There's only one calendar, so it's silly to ask what calendar
+                // the user wants to import into.
+                putItemsIntoCal(calendars[0], items, filePath);
+            } else if (calendars.length > 1) {
+                // Ask what calendar to import into
+                let args = {};
+                args.onOk = (aCal) => { putItemsIntoCal(aCal, items, filePath); };
+                args.calendars = calendars;
+                args.promptText = cal.l10n.getCalString("importPrompt");
+                openDialog("chrome://calendar/content/chooseCalendarDialog.xul",
+                           "_blank", "chrome,titlebar,modal,resizable", args);
+            }
         }
     });
 }
-- 
2.18.1

