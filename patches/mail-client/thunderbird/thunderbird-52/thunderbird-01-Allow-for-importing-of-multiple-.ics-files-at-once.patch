From 2928dcaab1bc1c293128c85fb5fc457889632159 Mon Sep 17 00:00:00 2001
From: Daniel Mueller <deso@posteo.net>
Date: Fri, 12 Oct 2018 22:12:29 -0700
Subject: [PATCH 1/2] Allow for importing of multiple .ics files at once

When working with large numbers of .ics files at once, Thunderbird's
one-file-at-a-time approach to importing them is limiting severely and
simply unfeasible.
Hence, with this change we adjust the import logic to allow for the
selection of multiple files at once. We factor out a function for
importing a single file and invoke this method for all files reported as
being selected.
---
 calendar/base/content/import-export.js | 140 +++++++++++++------------
 1 file changed, 74 insertions(+), 66 deletions(-)

diff --git a/calendar/base/content/import-export.js b/calendar/base/content/import-export.js
index c4bd1d5..81d17a 100644
--- a/calendar/base/content/import-export.js
+++ b/calendar/base/content/import-export.js
@@ -12,6 +12,73 @@ var MODE_WRONLY = 0x02;
 var MODE_CREATE = 0x08;
 var MODE_TRUNCATE = 0x20;
 
+function importEvent(picker, file, defaultCIDIndex, aCalendar, contractids) {
+    let filterIndex = picker.filterIndex;
+    if (picker.filterIndex < 0 || picker.filterIndex > contractids.length) {
+        // For some reason the wrong filter was selected, assume default extension
+        filterIndex = defaultCIDIndex;
+    }
+
+    let filePath = file.path;
+    let importer = Components.classes[contractids[filterIndex]]
+                             .getService(Components.interfaces.calIImporter);
+
+    const nsIFileInputStream = Components.interfaces.nsIFileInputStream;
+
+    let inputStream = Components.classes["@mozilla.org/network/file-input-stream;1"]
+                                .createInstance(nsIFileInputStream);
+    let items = [];
+    let exception;
+
+    try {
+        inputStream.init(file, MODE_RDONLY, parseInt("0444", 8), {});
+        items = importer.importFromStream(inputStream, {});
+    } catch (ex) {
+        exception = ex;
+        switch (ex.result) {
+            case Components.interfaces.calIErrors.INVALID_TIMEZONE:
+                showError(cal.calGetString("calendar", "timezoneError", [filePath]));
+                break;
+            default:
+                showError(cal.calGetString("calendar", "unableToRead") + filePath + "\n" + ex);
+        }
+    } finally {
+        inputStream.close();
+    }
+
+    if (!items.length && !exception) {
+        // the ics did not contain any events, so there's no need to proceed. But we should
+        // notify the user about it, if we haven't before.
+        showError(cal.calGetString("calendar", "noItemsInCalendarFile", [filePath]));
+        return;
+    }
+
+    if (aCalendar) {
+        putItemsIntoCal(aCalendar, items);
+        return;
+    }
+
+    let calendars = cal.getCalendarManager().getCalendars({});
+    calendars = calendars.filter(isCalendarWritable);
+
+    if (calendars.length < 1) {
+        // XXX alert something?
+        return;
+    } else if (calendars.length == 1) {
+        // There's only one calendar, so it's silly to ask what calendar
+        // the user wants to import into.
+        putItemsIntoCal(calendars[0], items, filePath);
+    } else {
+        // Ask what calendar to import into
+        let args = {};
+        args.onOk = (aCal) => { putItemsIntoCal(aCal, items, filePath); };
+        args.calendars = calendars;
+        args.promptText = calGetString("calendar", "importPrompt");
+        openDialog("chrome://calendar/content/chooseCalendarDialog.xul",
+                   "_blank", "chrome,titlebar,modal,resizable", args);
+    }
+}
+
 /**
  * Shows a file dialog, reads the selected file(s) and tries to parse events from it.
  *
@@ -25,7 +92,7 @@ function loadEventsFromFile(aCalendar) {
                            .createInstance(nsIFilePicker);
     picker.init(window,
                 calGetString("calendar", "filepickerTitleImport"),
-                nsIFilePicker.modeOpen);
+                nsIFilePicker.modeOpenMultiple);
     picker.defaultExtension = "ics";
 
     // Get a list of importers
@@ -61,75 +128,16 @@ function loadEventsFromFile(aCalendar) {
 
     let rv = picker.show();
 
-    if (rv != nsIFilePicker.returnCancel &&
-        picker.file && picker.file.path && picker.file.path.length > 0) {
-        let filterIndex = picker.filterIndex;
-        if (picker.filterIndex < 0 || picker.filterIndex > contractids.length) {
-            // For some reason the wrong filter was selected, assume default extension
-            filterIndex = defaultCIDIndex;
-        }
-
-        let filePath = picker.file.path;
-        let importer = Components.classes[contractids[filterIndex]]
-                                 .getService(Components.interfaces.calIImporter);
-
-        const nsIFileInputStream = Components.interfaces.nsIFileInputStream;
-
-        let inputStream = Components.classes["@mozilla.org/network/file-input-stream;1"]
-                                    .createInstance(nsIFileInputStream);
-        let items = [];
-        let exception;
-
-        try {
-            inputStream.init(picker.file, MODE_RDONLY, parseInt("0444", 8), {});
-            items = importer.importFromStream(inputStream, {});
-        } catch (ex) {
-            exception = ex;
-            switch (ex.result) {
-                case Components.interfaces.calIErrors.INVALID_TIMEZONE:
-                    showError(cal.calGetString("calendar", "timezoneError", [filePath]));
-                    break;
-                default:
-                    showError(cal.calGetString("calendar", "unableToRead") + filePath + "\n" + ex);
-            }
-        } finally {
-            inputStream.close();
-        }
-
-        if (!items.length && !exception) {
-            // the ics did not contain any events, so there's no need to proceed. But we should
-            // notify the user about it, if we haven't before.
-            showError(cal.calGetString("calendar", "noItemsInCalendarFile", [filePath]));
-            return;
-        }
-
-        if (aCalendar) {
-            putItemsIntoCal(aCalendar, items);
-            return;
-        }
-
-        let calendars = cal.getCalendarManager().getCalendars({});
-        calendars = calendars.filter(isCalendarWritable);
-
-        if (calendars.length < 1) {
-            // XXX alert something?
-            return;
-        } else if (calendars.length == 1) {
-            // There's only one calendar, so it's silly to ask what calendar
-            // the user wants to import into.
-            putItemsIntoCal(calendars[0], items, filePath);
-        } else {
-            // Ask what calendar to import into
-            let args = {};
-            args.onOk = (aCal) => { putItemsIntoCal(aCal, items, filePath); };
-            args.calendars = calendars;
-            args.promptText = calGetString("calendar", "importPrompt");
-            openDialog("chrome://calendar/content/chooseCalendarDialog.xul",
-                       "_blank", "chrome,titlebar,modal,resizable", args);
+    if (rv != nsIFilePicker.returnCancel && picker.files) {
+        let files = picker.files;
+        while (files.hasMoreElements()) {
+            let file = files.getNext();
+            importEvent(picker, file, defaultCIDIndex, aCalendar, contractids);
         }
     }
 }
 
+
 /**
  * Put items into a certain calendar, catching errors and showing them to the
  * user.
-- 
2.18.0

