From 295530d9f2b8a31f9d19b80c2c95c2a849f366a1 Mon Sep 17 00:00:00 2001
From: Johannes Altmanninger <aclopte@gmail.com>
Date: Sun, 9 Feb 2020 18:39:14 +0100
Subject: [PATCH 08/15] Teach reader to edit the history search term

---
 src/reader.cpp | 39 ++++++++++++++++++++++++++++++++++++---
 1 file changed, 36 insertions(+), 3 deletions(-)

diff --git a/src/reader.cpp b/src/reader.cpp
index 55e977..5ffa21 100644
--- a/src/reader.cpp
+++ b/src/reader.cpp
@@ -478,6 +478,31 @@ class reader_history_search_t {
         return false;
     }
 
+    void modify_search_string(std::function<void(wcstring &)> &&change) {
+        assert(by_line() || by_prefix());
+        bool was_at_end = is_at_end();
+        maybe_t<match_t> current_match;
+        maybe_t<size_t> previous_match_offset;
+        if (!is_at_end()) {
+            current_match = matches_.at(*match_index_);
+            previous_match_offset = last_match_offset;
+        }
+        auto match_offset = search_.modify_search_term(std::move(change), previous_match_offset);
+        matches_.clear();
+        skips_ = {search_string()};
+        match_index_ = none_t();
+
+        if (was_at_end) {
+            return;
+        }
+        if (match_offset) {
+            matches_.emplace_back(
+                match_t{search_.current_item().str(), search_.current_index(), *match_offset});
+            set_match_index(0);
+            search_.set_current_index(matches_.at(*match_index_).index_in_history);
+        }
+    }
+
     /// Go to the beginning (earliest) of the search.
     void go_to_beginning() {
         if (matches_.empty()) {
@@ -513,10 +538,18 @@ class reader_history_search_t {
     /// Reset, beginning a new line or token mode search.
     void reset_to_mode(const wcstring &text, const std::shared_ptr<history_t> &hist, mode_t mode) {
         assert(mode != inactive && "mode cannot be inactive in this setter");
-        skips_ = {text};
-        matches_.clear();
-        match_index_ = none_t();
+        bool already_active = active();
         mode_ = mode;
+        // If the search is already active, we just need to update the search string.
+        if (already_active && (by_line() || by_prefix())) {  // TODO token search
+            if (text != search_string()) {
+                modify_search_string([&text](wcstring &search_string) { search_string = text; });
+            }
+            return;
+        }
+        skips_ = {text};
+        matches_.clear();
+        match_index_ = none_t();
         history_search_flags_t flags = history_search_no_dedup;
         // Make the search case-insensitive unless we have an uppercase character.
         wcstring low = wcstolower(text);
-- 
2.26.3

