From eb4ba88db701db9c66abb0e358b1ecda9bee34d6 Mon Sep 17 00:00:00 2001
From: Johannes Altmanninger <aclopte@gmail.com>
Date: Sun, 27 Apr 2025 23:49:45 +0200
Subject: [PATCH 2/3] Be more careful to only pass actual keys to self-insert

I don't have a runnable test case but this does seem to have bitrotted.
Originally, we only cared about keys and the EOF and check-exit events.
Returning one of the other new events here seems totally wrong.

Try to fix this, and move the logic closer to where it's needed, so we no
longer need to update its name and we're less likely to forget to update it,
and it cannot.
---
 src/input.rs | 28 ++++++++++++++++------------
 1 file changed, 16 insertions(+), 12 deletions(-)

diff --git a/src/input.rs b/src/input.rs
index 5b3c43..cd2dc4 100644
--- a/src/input.rs
+++ b/src/input.rs
@@ -746,7 +746,15 @@ pub fn read_char(&mut self) -> CharEvent {
                         self.insert_front(seq);
                         // Issue #1595: ensure we only insert characters, not readline functions. The
                         // common case is that this will be empty.
-                        let mut res = self.read_characters_no_readline();
+                        let mut res = self.read_character_matching(|evt| {
+                            use CharEvent::*;
+                            use ImplicitEvent::*;
+                            match evt {
+                                Key(_) => true,
+                                Implicit(Eof | CheckExit) => true,
+                                Readline(_) | Command(_) | Implicit(_) => false,
+                            }
+                        });
 
                         // Hackish: mark the input style.
                         if readline_event.cmd == ReadlineCmd::SelfInsertNotFirst {
@@ -824,22 +832,18 @@ fn mapping_execute_matching_or_generic(&mut self) {
         peeker.consume();
     }
 
-    /// Helper function. Picks through the queue of incoming characters until we get to one that's not a
-    /// readline function.
-    fn read_characters_no_readline(&mut self) -> CharEvent {
+    /// Pick through the queue of incoming characters until we get to one that matches.
+    fn read_character_matching(&mut self, predicate: impl Fn(&CharEvent) -> bool) -> CharEvent {
         let mut saved_events = std::mem::take(&mut self.get_input_data_mut().event_storage);
         assert!(saved_events.is_empty(), "event_storage should be empty");
 
-        let evt_to_return: CharEvent;
-        loop {
+        let evt_to_return: CharEvent = loop {
             let evt = self.readch();
-            if evt.is_readline_or_command() {
-                saved_events.push(evt);
-            } else {
-                evt_to_return = evt;
-                break;
+            if (predicate)(&evt) {
+                break evt;
             }
-        }
+            saved_events.push(evt);
+        };
 
         // Restore any readline functions
         self.insert_front(saved_events.drain(..));
-- 
2.49.0

