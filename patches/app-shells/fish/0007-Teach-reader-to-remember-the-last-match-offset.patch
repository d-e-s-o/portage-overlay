From a954e01a389a8ae18a3e1f5b78e74dfa55b1adc9 Mon Sep 17 00:00:00 2001
From: Johannes Altmanninger <aclopte@gmail.com>
Date: Sun, 9 Feb 2020 18:39:14 +0100
Subject: [PATCH 07/15] Teach reader to remember the last match offset

If a search string does not match anymore (because of an edit), this
offset stays around, so we can still know where the search string
is located.

This will also be handy to avoid needless cursor jumping.
Example: the cursor is at the end of the search string (marked by ^s)

echo 12 123
        ^^^

Pressing backspace results in the command line

echo 12 123
        ^^

Because we remember the match position and try that first.
Without this we'd jump back to the first occurrence of 12.
---
 src/reader.cpp | 26 +++++++++++++++++++++++++-
 1 file changed, 25 insertions(+), 1 deletion(-)

diff --git a/src/reader.cpp b/src/reader.cpp
index 42ea81..55e977 100644
--- a/src/reader.cpp
+++ b/src/reader.cpp
@@ -346,8 +346,18 @@ class reader_history_search_t {
     /// Index into our matches list.
     maybe_t<size_t> match_index_;
 
+    /// The position of the last successful match, this is even valid when match_index_ is none.
+    maybe_t<size_t> last_match_offset;
+
     /// Move to an existing match.
-    void set_match_index(maybe_t<size_t> index) { match_index_ = index; }
+    void set_match_index(maybe_t<size_t> index) {
+        match_index_ = index;
+        if (match_index_) {
+            last_match_offset = matches_.at(*match_index_).match_offset;
+        } else {
+            last_match_offset = none_t();
+        }
+    }
 
     /// Adds the given match if we haven't seen it before.
     void add_if_new(wcstring text, size_t match_offset, history_search_direction_t dir) {
@@ -417,6 +427,18 @@ class reader_history_search_t {
 
     bool by_prefix() const { return mode_ == prefix; }
 
+    size_t match_position() const {
+        assert(by_line() || by_prefix());
+        if (!is_at_end()) {
+            assert(*match_index_ < matches_.size());
+            assert(*last_match_offset == matches_.at(*match_index_).match_offset);
+        }
+        if (!last_match_offset) {
+            return 0;
+        }
+        return *last_match_offset;
+    }
+
     /// Move the history search in the given direction \p dir.
     bool move_in_direction(history_search_direction_t dir) {
         maybe_t<size_t> old_match_index = match_index_;
@@ -499,6 +521,7 @@ class reader_history_search_t {
         // Make the search case-insensitive unless we have an uppercase character.
         wcstring low = wcstolower(text);
         if (low == text) flags |= history_search_ignore_case;
+        last_match_offset = none_t();
         // We can skip dedup in history_search_t because we do it ourselves in skips_.
         search_ = history_search_t(
             hist, text,
@@ -510,6 +533,7 @@ class reader_history_search_t {
         matches_.clear();
         skips_.clear();
         match_index_ = none_t();
+        last_match_offset = none_t();
         mode_ = inactive;
         search_ = history_search_t();
     }
-- 
2.26.3

