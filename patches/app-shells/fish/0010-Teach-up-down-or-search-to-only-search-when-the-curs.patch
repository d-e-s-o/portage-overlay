From e41585ac9977771b33c68c15b9bc3c1d293f71b1 Mon Sep 17 00:00:00 2001
From: Johannes Altmanninger <aclopte@gmail.com>
Date: Sat, 14 Mar 2020 22:54:22 +0100
Subject: [PATCH 10/15] Teach {up,down}-or-search to only search when the
 cursor is at the search string

Since we do not stop history search on commands like cursor movements,
before this patch it was impossible to use the up and down keys to move
between lines in a multi-line command buffer.  Do the line movement if
the cursor is not at the matched search string, otherwise search.
---
 doc_src/cmds/commandline.rst        |  2 ++
 share/completions/commandline.fish  |  1 +
 share/functions/down-or-search.fish |  9 ++++++---
 share/functions/up-or-search.fish   |  9 ++++++---
 src/builtin_commandline.cpp         | 22 ++++++++++++++++++----
 src/reader.cpp                      | 14 ++++++++++++++
 src/reader.h                        |  4 ++++
 7 files changed, 51 insertions(+), 10 deletions(-)

diff --git a/doc_src/cmds/commandline.rst b/doc_src/cmds/commandline.rst
index e26ee5..cae850 100644
--- a/doc_src/cmds/commandline.rst
+++ b/doc_src/cmds/commandline.rst
@@ -59,6 +59,8 @@ The following options output metadata about the commandline state:
 
 - ``-S`` or ``--search-mode`` evaluates to true if the commandline is performing a history search
 
+- ``-T`` or ``--search-term`` prints the starting and ending offset the current history search match
+
 - ``-P`` or ``--paging-mode`` evaluates to true if the commandline is showing pager contents, such as tab completions
 
 
diff --git a/share/completions/commandline.fish b/share/completions/commandline.fish
index 1be6b2..c2f439 100644
--- a/share/completions/commandline.fish
+++ b/share/completions/commandline.fish
@@ -18,6 +18,7 @@ complete -c commandline -s I -l input -d "Specify command to operate on"
 complete -c commandline -s C -l cursor -d "Set/get cursor position, not buffer contents"
 complete -c commandline -s L -l line -d "Print the line that the cursor is on"
 complete -c commandline -s S -l search-mode -d "Return true if performing a history search"
+complete -c commandline -s T -l search-term -d "Print the starting and ending offset the current history search match"
 complete -c commandline -s P -l paging-mode -d "Return true if showing pager content"
 
 
diff --git a/share/functions/down-or-search.fish b/share/functions/down-or-search.fish
index 16a518..a44ecc 100644
--- a/share/functions/down-or-search.fish
+++ b/share/functions/down-or-search.fish
@@ -1,8 +1,11 @@
 function down-or-search -d "Depending on cursor position and current mode, either search forward or move down one line"
     # If we are already in search mode, continue
-    if commandline --search-mode
-        commandline -f history-search-forward
-        return
+    if commandline --search-mode && set needle (commandline --search-term)
+        set cursor (commandline --cursor)
+        if test $cursor -ge $needle[1] && test $cursor -le $needle[2]
+            commandline -f history-search-forward
+            return
+        end
     end
 
     # If we are navigating the pager, then up always navigates
diff --git a/share/functions/up-or-search.fish b/share/functions/up-or-search.fish
index 3d7ae1..3075d3 100644
--- a/share/functions/up-or-search.fish
+++ b/share/functions/up-or-search.fish
@@ -1,8 +1,11 @@
 function up-or-search -d "Depending on cursor position and current mode, either search backward or move up one line"
     # If we are already in search mode, continue
-    if commandline --search-mode
-        commandline -f history-search-backward
-        return
+    if commandline --search-mode && set needle (commandline --search-term)
+        set cursor (commandline --cursor)
+        if test $cursor -ge $needle[1] && test $cursor -le $needle[2]
+            commandline -f history-search-backward
+            return
+        end
     end
 
     # If we are navigating the pager, then up always navigates
diff --git a/src/builtin_commandline.cpp b/src/builtin_commandline.cpp
index da4c4a..0a4549 100644
--- a/src/builtin_commandline.cpp
+++ b/src/builtin_commandline.cpp
@@ -147,6 +147,7 @@ maybe_t<int> builtin_commandline(parser_t &parser, io_streams_t &streams, wchar_
     bool cursor_mode = false;
     bool line_mode = false;
     bool search_mode = false;
+    bool search_term = false;
     bool paging_mode = false;
     const wchar_t *begin = nullptr, *end = nullptr;
 
@@ -174,7 +175,7 @@ maybe_t<int> builtin_commandline(parser_t &parser, io_streams_t &streams, wchar_
         return STATUS_CMD_ERROR;
     }
 
-    static const wchar_t *const short_options = L":abijpctforhI:CLSsP";
+    static const wchar_t *const short_options = L":abijpctforhI:CLSsTP";
     static const struct woption long_options[] = {{L"append", no_argument, nullptr, 'a'},
                                                   {L"insert", no_argument, nullptr, 'i'},
                                                   {L"replace", no_argument, nullptr, 'r'},
@@ -191,6 +192,7 @@ maybe_t<int> builtin_commandline(parser_t &parser, io_streams_t &streams, wchar_
                                                   {L"cursor", no_argument, nullptr, 'C'},
                                                   {L"line", no_argument, nullptr, 'L'},
                                                   {L"search-mode", no_argument, nullptr, 'S'},
+                                                  {L"search-term", no_argument, nullptr, 'T'},
                                                   {L"paging-mode", no_argument, nullptr, 'P'},
                                                   {nullptr, 0, nullptr, 0}};
 
@@ -255,6 +257,10 @@ maybe_t<int> builtin_commandline(parser_t &parser, io_streams_t &streams, wchar_
                 search_mode = true;
                 break;
             }
+            case 'T': {
+                search_term = true;
+                break;
+            }
             case 's': {
                 selection_mode = true;
                 break;
@@ -286,7 +292,7 @@ maybe_t<int> builtin_commandline(parser_t &parser, io_streams_t &streams, wchar_
 
         // Check for invalid switch combinations.
         if (buffer_part || cut_at_cursor || append_mode || tokenize || cursor_mode || line_mode ||
-            search_mode || paging_mode) {
+            search_mode || search_term || paging_mode) {
             streams.err.append_format(BUILTIN_ERR_COMBO, argv[0]);
             builtin_print_error_trailer(parser, streams.err, cmd);
             return STATUS_INVALID_ARGS;
@@ -337,14 +343,15 @@ maybe_t<int> builtin_commandline(parser_t &parser, io_streams_t &streams, wchar_
     }
 
     // Check for invalid switch combinations.
-    if ((search_mode || line_mode || cursor_mode || paging_mode) && (argc - w.woptind > 1)) {
+    if ((search_mode || search_term || line_mode || cursor_mode || paging_mode) &&
+        (argc - w.woptind > 1)) {
         streams.err.append_format(BUILTIN_ERR_TOO_MANY_ARGUMENTS, argv[0]);
         builtin_print_error_trailer(parser, streams.err, cmd);
         return STATUS_INVALID_ARGS;
     }
 
     if ((buffer_part || tokenize || cut_at_cursor) &&
-        (cursor_mode || line_mode || search_mode || paging_mode)) {
+        (cursor_mode || line_mode || search_mode || search_term || paging_mode)) {
         streams.err.append_format(BUILTIN_ERR_COMBO, argv[0]);
         builtin_print_error_trailer(parser, streams.err, cmd);
         return STATUS_INVALID_ARGS;
@@ -403,6 +410,13 @@ maybe_t<int> builtin_commandline(parser_t &parser, io_streams_t &streams, wchar_
         return reader_is_in_search_mode() ? 0 : 1;
     }
 
+    if (search_term) {
+        size_t begin, length;
+        bool ok = reader_get_search_term(&begin, &length);
+        if (ok) streams.out.append_format(L"%lu\n%lu\n", begin, begin + length);
+        return ok ? 0 : 1;
+    }
+
     if (paging_mode) {
         return reader_has_pager_contents() ? 0 : 1;
     }
diff --git a/src/reader.cpp b/src/reader.cpp
index 0e95f9..0f1c5f 100644
--- a/src/reader.cpp
+++ b/src/reader.cpp
@@ -4275,6 +4275,20 @@ bool reader_is_in_search_mode() {
     return data && data->history_search.active();
 }
 
+bool reader_get_search_term(size_t *begin, size_t *length) {
+    reader_data_t *data = current_data_or_null();
+    if (data == nullptr) return false;
+    const auto &history_search = data->history_search;
+    if (!history_search.active()) return false;
+    if (history_search.is_at_end()) return false;
+    // TODO token history_search needs to store match position as well.
+    if (data->history_search.by_token()) return false;
+    assert(history_search.by_line() || history_search.by_prefix());
+    *begin = history_search.match_position();
+    *length = history_search.search_string().size();
+    return true;
+}
+
 bool reader_has_pager_contents() {
     reader_data_t *data = current_data_or_null();
     return data && !data->current_page_rendering.screen_data.empty();
diff --git a/src/reader.h b/src/reader.h
index b861b8..53afcb 100644
--- a/src/reader.h
+++ b/src/reader.h
@@ -257,6 +257,10 @@ bool check_cancel_from_fish_signal();
 /// Test whether the interactive reader is in search mode.
 bool reader_is_in_search_mode();
 
+/// Get the range of the search string that matches the current history entry. Returns false
+/// if the current command line is not a matched history entry.
+bool reader_get_search_term(size_t *begin, size_t *length);
+
 /// Test whether the interactive reader has visible pager contents.
 bool reader_has_pager_contents();
 
-- 
2.26.3

