From f23f27f9fb3553e4669868474038074dc2883fda Mon Sep 17 00:00:00 2001
From: Johannes Altmanninger <aclopte@gmail.com>
Date: Sun, 9 Feb 2020 18:39:14 +0100
Subject: [PATCH 01/15] Make history_item_t::matches_search return the match
 offset

Also have it accept an optional preferred offset for the match, which
will be used when editing the search string, to avoid some jumping around.
---
 src/history.cpp | 42 +++++++++++++++++++++++++++++++++---------
 src/history.h   |  8 +++++---
 2 files changed, 38 insertions(+), 12 deletions(-)

diff --git a/src/history.cpp b/src/history.cpp
index 868c97..70691b 100644
--- a/src/history.cpp
+++ b/src/history.cpp
@@ -195,8 +195,9 @@ history_item_t::history_item_t(wcstring str, time_t when, history_identifier_t i
       identifier(ident),
       persist_mode(persist_mode) {}
 
-bool history_item_t::matches_search(const wcstring &term, enum history_search_type_t type,
-                                    bool case_sensitive) const {
+maybe_t<size_t> history_item_t::matches_search(const wcstring &term,
+                                               enum history_search_type_t type, bool case_sensitive,
+                                               maybe_t<size_t> preferred_match_offset) const {
     // Note that 'term' has already been lowercased when constructing the
     // search object if we're doing a case insensitive search.
     wcstring contents_lower;
@@ -207,27 +208,50 @@ bool history_item_t::matches_search(const wcstring &term, enum history_search_ty
 
     switch (type) {
         case history_search_type_t::exact: {
-            return term == content_to_match;
+            if (term == content_to_match) {
+                return 0;
+            }
+            return none_t();
         }
         case history_search_type_t::contains: {
-            return content_to_match.find(term) != wcstring::npos;
+            if (preferred_match_offset &&
+                *preferred_match_offset + term.size() <= content_to_match.size() &&
+                term == content_to_match.substr(*preferred_match_offset, term.size())) {
+                return preferred_match_offset;
+            }
+            size_t offset = content_to_match.find(term);
+            if (offset != wcstring::npos) {
+                return offset;
+            }
+            return none_t();
         }
         case history_search_type_t::prefix: {
-            return string_prefixes_string(term, content_to_match);
+            if (string_prefixes_string(term, content_to_match)) {
+                return 0;
+            }
+            return none_t();
         }
         case history_search_type_t::contains_glob: {
             wcstring wcpattern1 = parse_util_unescape_wildcards(term);
             if (wcpattern1.front() != ANY_STRING) wcpattern1.insert(0, 1, ANY_STRING);
             if (wcpattern1.back() != ANY_STRING) wcpattern1.push_back(ANY_STRING);
-            return wildcard_match(content_to_match, wcpattern1);
+            if (wildcard_match(content_to_match, wcpattern1)) {
+                // This one does not yet return an accurate match offset, but
+                // glob search is not used interactively, currently don't need an offset.
+                return 0;
+            }
+            return none_t();
         }
         case history_search_type_t::prefix_glob: {
             wcstring wcpattern2 = parse_util_unescape_wildcards(term);
             if (wcpattern2.back() != ANY_STRING) wcpattern2.push_back(ANY_STRING);
-            return wildcard_match(content_to_match, wcpattern2);
+            if (wildcard_match(content_to_match, wcpattern2)) {
+                return 0;
+            }
+            return none_t();
         }
         case history_search_type_t::match_everything: {
-            return true;
+            return 0;
         }
     }
     DIE("unexpected history_search_type_t value");
@@ -629,7 +653,7 @@ bool history_search_t::go_backwards() {
         }
 
         // Look for an item that matches and (if deduping) that we haven't seen before.
-        if (!item.matches_search(canon_term_, search_type_, !ignores_case())) {
+        if (!item.matches_search(canon_term_, search_type_, !ignores_case(), none_t())) {
             continue;
         }
 
diff --git a/src/history.h b/src/history.h
index daa22f..b4bff6 100644
--- a/src/history.h
+++ b/src/history.h
@@ -84,9 +84,11 @@ class history_item_t {
     /// \return whether the text is empty.
     bool empty() const { return contents.empty(); }
 
-    // \return wehther our contents matches a search term.
-    bool matches_search(const wcstring &term, enum history_search_type_t type,
-                        bool case_sensitive) const;
+    // Returns the offset where the search term matchs our content.
+    // Tries to match at a specific offset if given before trying to match anywhere.
+    maybe_t<size_t> matches_search(const wcstring &term, enum history_search_type_t type,
+                                   bool case_sensitive,
+                                   maybe_t<size_t> preferred_match_offset) const;
 
     /// \return the timestamp for creating this history item.
     time_t timestamp() const { return creation_timestamp; }
-- 
2.26.3

