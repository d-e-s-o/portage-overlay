#!/sbin/runscript

#/***************************************************************************
# *   Copyright (C) 2015 deso (deso@posteo.net)                             *
# *                                                                         *
# *   This program is free software: you can redistribute it and/or modify  *
# *   it under the terms of the GNU General Public License as published by  *
# *   the Free Software Foundation, either version 3 of the License, or     *
# *   (at your option) any later version.                                   *
# *                                                                         *
# *   This program is distributed in the hope that it will be useful,       *
# *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
# *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
# *   GNU General Public License for more details.                          *
# *                                                                         *
# *   You should have received a copy of the GNU General Public License     *
# *   along with this program.  If not, see <http://www.gnu.org/licenses/>. *
# ***************************************************************************/

# $Header: Init script for automated running of btrfs-backup.$


depend() {
  # TODO: The dependencies listed here are specific to the shutdown
  #       process. Perhaps the user wants to run the script at start up,
  #       then things would be screwed. Fix this.
  # TODO: It appears that whenever a service is listed here but does not
  #       exist in the run level the program will *not* start up at all.
  #       This happened with 'savecache' which is not used on my system.
  #       This is error prone and not very portable. Find a way to work
  #       around this issue.
  before killprocs mount-ro

  # Backups can potentially take a long time. Disable the default
  # timeout that is imposed on standard init scripts.
  keyword -timeout
}

start() {
  ebegin "Starting btrfs backup process"

  # We need to explicitly read in the conf.d configuration here. The
  # reason is that if the init.d script is just a symlink then OpenRC
  # will not source the configuration file correctly.
  # TODO: It is unclear whether RC_SVCNAME, RC_SERVICE, or SVCNAME is
  #       the "correct" variable to use.
  local conf="/etc/conf.d/${RC_SVCNAME}"
  source ${conf}

  if [ -z "${BTRFS_BACKUP_SRCREPO}" -o\
       -z "${BTRFS_BACKUP_DSTREPO}" -o\
       -z "${BTRFS_BACKUP_SUBVOLS}" ]; then
    eerror "The following variables are required for ${RC_SVCNAME} to work: "
    eerror "BTRFS_BACKUP_SRCREPO: The source repository, i.e., the directory "
    eerror "                      where snapshots are stored."
    eerror "BTRFS_BACKUP_DSTREPO: The destination repository."
    eerror "BTRFS_BACKUP_SUBVOLS: A list of subvolumes to backup."
    eerror ""
    eerror "Please define them in ${conf}."
    return 1
  fi

  # BTRFS_BACKUP_PROG is optional.
  local btrfs_backup=${BTRFS_BACKUP_PROG:-"/usr/bin/btrfs-backup"}
  # BTRFS_BACKUP_MOUNT is optional.
  local mount=${BTRFS_BACKUP_MOUNT:-""}
  # BTRFS_BACKUP_OPTS is optional.
  local options=${BTRFS_BACKUP_OPTS:-""}
  local src="${BTRFS_BACKUP_SRCREPO}"
  local dst="${BTRFS_BACKUP_DSTREPO}"

  local subvols=$(
      echo -e "${BTRFS_BACKUP_SUBVOLS}" |\
      xargs --max-lines=1 --replace='{}' -- echo "--subvolume={}" |\
      xargs
    )
  local args="backup ${options} ${subvols} ${src} ${dst}"

  if test -n "${mount}" && ! mountpoint --quiet "${mount}" &> /dev/null; then
    if ! mount "${mount}" &> /dev/null; then
      eerror "Failed to mount ${mount}"
      eend $?
      return 1
    fi

    mounted=1
  else
    mounted=0
  fi

  # TODO: Need to iron out what btrfs-backup prints and what we want to
  #       appear here.
  if ! "${btrfs_backup}" ${args}; then
    eerror "${btrfs_backup} failed"
  fi
  result=$?

  if [ ${mounted} -ne 0 ]; then
    if ! umount "${mount}" &> /dev/null; then
      eerror "Failed to unmount ${mount}"
    fi
  fi
  eend ${result}
}
