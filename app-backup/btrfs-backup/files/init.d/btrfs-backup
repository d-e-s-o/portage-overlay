#!/sbin/openrc-run

#/***************************************************************************
# *   Copyright (C) 2015-2016 Daniel Mueller (deso@posteo.net)              *
# *                                                                         *
# *   This program is free software: you can redistribute it and/or modify  *
# *   it under the terms of the GNU General Public License as published by  *
# *   the Free Software Foundation, either version 3 of the License, or     *
# *   (at your option) any later version.                                   *
# *                                                                         *
# *   This program is distributed in the hope that it will be useful,       *
# *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
# *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
# *   GNU General Public License for more details.                          *
# *                                                                         *
# *   You should have received a copy of the GNU General Public License     *
# *   along with this program.  If not, see <http://www.gnu.org/licenses/>. *
# ***************************************************************************/

# $Header: Init script for automated running of btrfs-backup.$


error() {
  local exit_code=${?}
  local function=${1}

  eerror "$*"
  # The user can provide a function, BTRFS_ERROR, which is then also invoked
  # for every error.
  if declare -F BTRFS_ERROR > /dev/null; then
    BTRFS_ERROR "$*"
  fi

  return ${exit_code}
}

unmount_() {
  if [ ${2} -ne 0 ]; then
    if ! umount "${1}" &> /dev/null; then
      error "Failed to unmount ${1}"
    fi
  fi
}

depend() {
  # It is important to use 'need' rather than 'after' here as the latter
  # does not impose a barrier during shutdown, meaning that while the
  # backup is running localmount could be stopped which likely is fatal.
  # Please use the RC_NEED variable for specifying additional
  # dependencies in /etc/conf.d/${RC_SVCNAME}
  need localmount

  # Backups can potentially take a long time. Disable the default
  # timeout that is imposed on standard init scripts.
  keyword -timeout
}

start() {
  :
}

stop() {
  if yesno $RC_REBOOT; then
    ewarn "Skipping btrfs backup due to reboot"
    return 0
  fi

  ebegin "Starting btrfs backup process"

  # We need to explicitly read in the conf.d configuration here. The
  # reason is that if the init.d script is just a symlink then OpenRC
  # will not source the configuration file correctly.
  # TODO: It is unclear whether RC_SVCNAME, RC_SERVICE, or SVCNAME is
  #       the "correct" variable to use.
  local conf="/etc/conf.d/${RC_SVCNAME}"
  source ${conf}

  if [ -z "${BTRFS_BACKUP_SRCREPO}" -o\
       -z "${BTRFS_BACKUP_DSTREPO}" -o\
       -z "${BTRFS_BACKUP_SUBVOLS}" ]; then
    msg=$(cat <<EOF
The following variables are required for ${RC_SVCNAME} to work:
BTRFS_BACKUP_SRCMOUNT: The source volume to mount.
BTRFS_BACKUP_DSTMOUNT: The destination volume to mount.
BTRFS_BACKUP_SRCREPO: The source repository, i.e., the directory
                      where snapshots are stored.
BTRFS_BACKUP_DSTREPO: The destination repository.
BTRFS_BACKUP_SUBVOLS: A list of subvolumes to backup.

Please define them in ${conf}.
EOF
)
    error "${msg}"
    return 1
  fi

  # BTRFS_BACKUP_PROG is optional.
  local btrfs_backup=${BTRFS_BACKUP_PROG:-"/usr/bin/btrfs-backup"}
  # BTRFS_BACKUP_SRCMOUNT is optional.
  local srcmnt=${BTRFS_BACKUP_SRCMOUNT:-""}
  # BTRFS_BACKUP_DSTMOUNT is optional.
  local dstmnt=${BTRFS_BACKUP_DSTMOUNT:-""}
  # BTRFS_BACKUP_OPTS is optional.
  local options=${BTRFS_BACKUP_OPTS:-""}
  local src="${BTRFS_BACKUP_SRCREPO}"
  local dst="${BTRFS_BACKUP_DSTREPO}"

  local subvols=$(
      echo -e "${BTRFS_BACKUP_SUBVOLS}" |\
      xargs --max-lines=1 --replace='{}' -- echo "--subvolume={}" |\
      xargs
    )
  local args="backup ${options} ${subvols} ${src} ${dst}"

  if test -n "${srcmnt}" && ! mountpoint --quiet "${srcmnt}" &> /dev/null; then
    if ! mount "${srcmnt}" &> /dev/null; then
      error "Failed to mount ${srcmnt}"
      eend $?
      # We still want the script to succeed.
      return 0
    fi

    srcmounted=1
  else
    srcmounted=0
  fi

  if test -n "${dstmnt}" && ! mountpoint --quiet "${dstmnt}" &> /dev/null; then
    if ! mount "${dstmnt}" &> /dev/null; then
      error "Failed to mount ${dstmnt}"
      eend $?
      unmount_ "${srcmnt}" ${srcmounted}
      # We still want the script to succeed.
      return 0
    fi

    dstmounted=1
  else
    dstmounted=0
  fi

  # TODO: Need to iron out what btrfs-backup prints and what we want to
  #       appear here.
  out=$(eval "${btrfs_backup} ${args}" 2>&1)
  result=$?
  if [ ${result} -ne 0 ]; then
    error "${out}"
  fi

  unmount_ "${dstmnt}" ${dstmounted}
  unmount_ "${srcmnt}" ${srcmounted}
  eend ${result}
}
