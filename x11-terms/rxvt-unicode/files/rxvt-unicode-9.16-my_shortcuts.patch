diff --git a/src/perl/tabbed b/src/perl/tabbed
index 76a917f..f3f800e 100644
--- a/src/perl/tabbed
+++ b/src/perl/tabbed
@@ -46,11 +46,12 @@ sub refresh {
 
    my @ofs;
 
-   substr $text, 0, 7, "[NEW] |";
-   @$rend[0 .. 5] = ($self->{rs_tab}) x 6;
-   push @ofs, [0, 6, sub { $_[0]->new_tab }];
+   # we do not want this "NEW" tab thingy
+   #substr $text, 0, 7, "[NEW] |";
+   #@$rend[0 .. 5] = ($self->{rs_tab}) x 6;
+   #push @ofs, [0, 6, sub { $_[0]->new_tab }];
 
-   my $ofs = 7;
+   my $ofs = 0;
    my $idx = 0;
 
    for my $tab (@{ $self->{tabs} }) {
@@ -319,6 +320,15 @@ sub tab_start {
 
    push @{ $self->{tabs} }, $tab;
 
+   # we want the new tab to appear next to the current one on the right side
+   for (my $idx = $#{ $self->{tabs} } - 1; $idx > 0; $idx--)
+   {
+     last if ($self->{tabs}[$idx] == $self->{cur});
+
+     ($self->{tabs}[$idx], $self->{tabs}[$idx + 1]) =
+       ($self->{tabs}[$idx + 1], $self->{tabs}[$idx]);
+   }
+
 #   $tab->{name} ||= scalar @{ $self->{tabs} };
    $self->make_current ($tab);
 
@@ -348,32 +358,85 @@ sub tab_destroy {
 sub tab_key_press {
    my ($self, $tab, $event, $keysym, $str) = @_;
 
-   if ($event->{state} & urxvt::ShiftMask) {
-      if ($keysym == 0xff51 || $keysym == 0xff53) {
+   # for a table of X11 keysyms see:
+   # /usr/include/X11/keysymdef.h or
+   # http://www.cl.cam.ac.uk/~mgk25/ucs/keysymdef.h
+   my $key_1 = 0x0031; # number 1
+   my $key_2 = 0x0032; # number 2
+   my $key_3 = 0x0033; # number 3
+   my $key_4 = 0x0034; # number 4
+   my $key_5 = 0x0035; # number 5
+   my $key_6 = 0x0036; # number 6
+   my $key_7 = 0x0037; # number 7
+   my $key_8 = 0x0038; # number 8
+   my $key_9 = 0x0039; # number 9
+   my $key_0 = 0x0030; # number 0
+   my $key_a = 0x0061; # small letter a
+   my $key_b = 0x0062; # small letter b
+   my $key_c = 0x0063; # small letter c
+   my $key_d = 0x0064; # small letter d
+   my $key_e = 0x0065; # small letter e
+   my $key_f = 0x0066; # small letter f
+   my $key_h = 0x0068; # small letter h
+   my $key_l = 0x006c; # small letter l
+   my $key_n = 0x006e; # small letter n
+   my $key_H = 0x0048; # capital letter H
+   my $key_L = 0x004c; # capital letter L
+
+   my %tab_index = ($key_1 => 0,
+                    $key_2 => 1,
+                    $key_3 => 2,
+                    $key_4 => 3,
+                    $key_5 => 4,
+                    $key_6 => 5,
+                    $key_7 => 6,
+                    $key_8 => 7,
+                    $key_9 => 8,
+                    $key_0 => 9,
+                    $key_a => 10,
+                    $key_b => 11,
+                    $key_c => 12,
+                    $key_d => 13,
+                    $key_e => 14,
+                    $key_f => 15);
+
+
+   if ($event->{state} & urxvt::Mod1Mask)
+   {
+      if ($keysym == $key_h || $keysym == $key_l)
+      {
          my ($idx) = grep $self->{tabs}[$_] == $tab, 0 .. $#{ $self->{tabs} };
 
-         --$idx if $keysym == 0xff51;
-         ++$idx if $keysym == 0xff53;
+         --$idx if $keysym == $key_h;
+         ++$idx if $keysym == $key_l;
 
          $self->make_current ($self->{tabs}[$idx % @{ $self->{tabs}}]);
-
-         return 1;
-      } elsif ($keysym == 0xff54) {
-         $self->new_tab;
-
          return 1;
       }
-   }
-   elsif ($event->{state} & urxvt::ControlMask) {
-      if ($keysym == 0xff51 || $keysym == 0xff53) {
+      elsif ($keysym == $key_H || $keysym == $key_L)
+      {
          my ($idx1) = grep $self->{tabs}[$_] == $tab, 0 .. $#{ $self->{tabs} };
-         my  $idx2  = ($idx1 + ($keysym == 0xff51 ? -1 : +1)) % @{ $self->{tabs} };
+         my  $idx2  = ($idx1 + ($keysym == $key_H ? -1 : +1)) % @{ $self->{tabs} };
 
          ($self->{tabs}[$idx1], $self->{tabs}[$idx2]) =
             ($self->{tabs}[$idx2], $self->{tabs}[$idx1]);
 
          $self->make_current ($self->{tabs}[$idx2]);
+         return 1;
+      }
+      elsif ($keysym == $key_n)
+      {
+         $self->new_tab;
+         return 1;
+      }
+      elsif (exists $tab_index{$keysym})
+      {
+         my $idx = $tab_index{$keysym};
 
+         if (0 <= $idx && $idx <= $#{ $self->{tabs} })
+         {
+            $self->make_current ($self->{tabs}[$idx]);
+         }
          return 1;
       }
    }
